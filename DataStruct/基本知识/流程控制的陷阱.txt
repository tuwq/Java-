第六章 流程控制的陷阱
总结: 
	1)本章主要介绍了Java程序中流程控制相关的陷阱，包括分支结构、循环结构中可能存在的陷阱
	2)其中，分支结构中介绍了switch语句中可能存在错误和if语句可能存在的错误
	3)switch语句里的错误和if语句里的错误都具有很好的隐蔽性，一般不容易发现
	4)介绍循环结构时主要介绍了for循环、foreach循环可能存在的错误
	5)尤其要注意，改变循环的循环计数器是一种非常危险的事情，很容易给程序增加额外的风险
1.switch语句的陷阱
	1)default分支永远会执行吗
		(1)switch语句之后可以包含一个default分支
		(2)从字面上看，这个分支是默认分支，似乎是无条件执行的分支
		(3)default分支的潜在条件是
			a.表达式的值与前面分支的值都不相等
			b，在正常情况下，只有当switch语句的前面分支没有获得执行时
			c.default分支才会获得执行机会
	2)break的重要性
		(1)在case分支后的每个代码块都有一条break语句，这个break语句有极其重要的意义
		(2)用于终止当前分支的执行体
		(3)某个case分支后没有使用break来终止这个分支的执行体，即使使用花括号来包围该分支也是无效的
		(4)在switch分支语句中绝大部分都不应该省略break语句
	3)Java7增强的switch表达式
		(1)从Java7开始，switch表达式的类型可以是String类型，但不能是long、float、double等其他类型
		(2)switch语句中的表达式完全可以是enum类型
	4).标签引起的陷阱
		(1)Java语句的标签是一个怪胎，它主要是为C语言中的goto语句而创建的，但Java中根本没有goto语句
		(2)虽然Java一直将goto作为保留字，但估计Java也没有引用goto语句的打算，所以它没有任何实际意义
3.if语句的陷阱
	1)else隐含的条件
		(1)else的字面意义是"否则"，隐含条件是前面条件都不符合，也就是else有一个隐含条件
		(2)else if的条件是if显式条件和else隐式条件的交集
	2)使用if语句时，应总是优先把包含范围小的条件放在前面处理
	3)小心空语句
		(1)Java允许单独一个分号作为空语句，空语句往往在不经意间产生
		(2)注意不要在if()后加分号，如if();
4.循环体的花括号
	1)什么时候可以省略花括号
		(1)Java对于if、while、for语句的处理策略完全一样，如果紧跟该语句的是花括号括起来的语句块
		(2)那么该语句将控制花括号括起来的语句块
		(3)没有该语句之后没有紧跟花括号，那么语句的作用范围到该语句之后的第一个分号结束
	2)当循环体只有一条语句时才可以省略循环体的花括号
	3)在最极端的情况下，即使循环体只有一条语句，依然不能省略循环体的花括号
		for(int i=0;i<10;i++)
			Cat cat=new Cat();
	(4)上面这条语句将会报错，这是因为Java语言规定,for、while或do循环中的重复执行语句不能是一条单独的局部变量定义语句
	(5)如果程序要使用循环来重复定义局部变量，这条局部变量定义语句必须放在花括号内才有效，因此要将上面的语句改为下面的形式
		for(int i=0;i<10;i++){
			Cat cat=new Cat();
		}
	(6)由上面程序可知，当循环体只有一条局部变量定义语句时，仍然不可以省略循环体的花括号
	(7)上面程序给出的教训非常明显，尽量保留循环体的花括号，这样写出来的程序会比较健壮性，虽然省略花括号看上去比较简洁，但凭空增添出错的可能
5.for循环的陷阱
	1)分号惹的祸
		(1)for(int i=0;i<10;i++);{}
		(2)与前面介绍的if、while语句相似的是，如果for语句后没有紧跟花括号，那么for语句的控制范围到紧跟该语句的第一个分号为止
		(3)需要指出的是，虽然迭代部分可以包含多条语句，但多条语句不能用分号作为分隔符，只能用逗号作为分隔符
	2)小心循环计数器的值
		(1)不要仅根据习惯来判断一个循环会执行多少次，必须仔细对待循环执行过程中每个可能改变循环计数器的语句，才能正确掌握循环的执行次数
		(2)最安全的做法就是尽量避免改变循环计数器的值，如果循环体内需要根据访问修改循环计数器的值，则可以考虑额外定义一个新变量来保存修改过的值
	3)浮点数作循环计数器
		(1)对于一个float类型变量而言，它很容易丢失部分数据，因此对于999999999这个值而言，float会以1.0E9保存它，每次它加一之后，它的值依然是1.0E9
		(2)因此，即使程序看上去会执行有限的次数，但实际上却是一个死循环，因为循环计数器i从来不曾改变
		(3)如果加值量小，在有些情况下，甚至一次循环都不会执行，因为精度的原因，循环结束条件直接会返回True
6.foreach循环的循环计数器
	1)当使用foreach循环来迭代输出数组元素或集合元素时，系统将数组元素、集合元素的副本传给循环计数器
	2)foreach循环中的循环计数器并不是数组元素、集合元素本身
	3)由于foreach循环中的循环计数器本身并不是数组元素、集合元素，它只是一个中间变量
	4)临时保存了正在遍历的数组元素、集合元素，因此通常不要对循环变量进行赋值，虽然这种赋值在语法上是允许的，但没有太大的实际意义，而且极容易引起错误
	5)对foreach循环计数器赋值没有意义
		(1)在foreach循环中对循环计数器赋值导致不能正确遍历集合，不能准确取出每个集合元素的值
		(2)而且，当再次访问集合本身时，会发现集合本身依然没有任何改变
		(3)不要对foreach循环的循环计数器进行赋值
	6)使用foreach循环迭代数组，集合时，循环计数器只是保存了当前正在遍历的数组元素、集合元素的值，并不是数组、集合元素本身
	