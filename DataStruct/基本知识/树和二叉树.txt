第十一章 树和二叉树
1.前言
	1)前面介绍的数据结构-线性表、栈和队列都是线性的数据结构，这种数据结构之内的元素只存在一个对一个的关系，存储、处理起来相对比较简单
	2)本章将要介绍的树则是一种更复杂的数据结构，这种结构内的元素存在一个对多个的关系，例如，一个父节点可以包含多个子节点
	3)树是一种非常常用的数据结构，尤其是二叉树的应用更是广泛，哈夫曼树及哈夫曼编码就是二叉树的重要用途
	4)排序二叉树、平衡二叉树、红黑树在实际编程中都有极为广泛的用途，Java集合框架的TreeMap本质上就是红黑树的实现
	5)本章将详细介绍树这种数据结构的实现，包含树的三种存储结构:父节点表示法、子节点表达法、链表存储
	6)本章将重点介绍二叉树，包含二叉树的各种遍历方式，以及三种深度优先遍历和广度优先遍历，还会介绍哈夫曼树，排序二叉树和红黑树等等
2.树的概述
	1)树也是一种非常常用的数据结构，树与前面介绍的线性表、栈、队列等线性结构不同，树是一种非线性结构
	2)树的定义和基本术语
		(1)计算机世界里的树，是从自然界中实际的树抽象而来的，它指的是N个有父子关系的节点的有限集合，对于这个有限的节点集合而言，它满足如下条件
			a.当N=0时，该节点集合为空，这棵树也被称为空树
			b.在任意的非空树中，有且仅有一个根节点
			c.当N>1时，除根节点以外的其余节点可分为M个互为相交的有限集合T1,T2,..,Tm,其中的每个集合本身又是一棵树，并称其为根的子树
		(2)从上面的定义可以发现树的递归特性，一棵树由根和若干棵子树组成，而每棵子树又由若干棵更小的子树组成
		(3)树中任一节点可以有0或多个子节点，但只能有一个父节点，根节点是一个特例，根节点没有父节点，叶子节点没有子节点
			树中每个节点既可以是其上一级的子节点，也可以是下一个节点的父节点，
			因此同一个节点既可以是父节点，也可以是子节点(类似一个人--它既是他儿子的父亲，又是他父亲的儿子)
		(4)很显然，父子关系是一种非线性关系，所以树结构是非线性结构，如果按节点是否包含子节点来分，节点可分成以下两种
			a.普通节点:包含子节点的节点
			b.叶子节点:没有子节点的节点，因此叶子节点不可作为父节点
			如果按节点是否具有唯一的父节点来分，节点又分为如下两种
			a.根节点:没有节点的节点，根节点不可作为子节点
			b.普通节点:具有唯一父节点的节点
		(5)一棵树只能有一个根节点，如果一棵树有了多个根节点，那么它已经不再是一棵树了，而是多棵树的集合，有时也被称为森林
	3)与树有关的术语有如下一些
		(1)节点:树的最基本组成单元，通常包含一个数据元素及若干指针用于指向其他节点
		(2)节点的度:节点拥有的子树的个数被称为节点的度
		(3)树的度:树中所有节点的度的最大值就是该树的度
		(4)叶子节点:度为0的节点被称为叶子节点或终端节点
		(5)分支节点:度不为0的节点被称分支节点或非终端节点
		(6)子节点、父节点、兄弟节点:节点的子树的根被称为该节点的子节点，而该节点称为子节点的父节点，具有相同父节点的子节点之间互称为兄弟节点
		(7)节点的层次:节点的层次从根开始算起，根的层次值为1，其余节点的层次值为父节点层次值加1
		(8)树的深度:树中节点的最大层次值称为树的的深度或高度
		(9)有序树和无序树:如果将树中节点的各棵子树看成从左到右是有序的(既不能互换)，则称该树为有序树，否则称为无序树
		(10)祖先节点:从根到该节点所经分支上的所有节点
		(11)后代节点:从某节点为根的子树中任一节点都称为该节点的后代节点
		(12)森林:森林是两棵或两棵以上互不相交的树的集合，删去一棵树的根，就得到一个森林
	4)树的基本操作
		(1)如果需要实现一棵树，程序不仅要以合适的方式保存该树的所有节点，还要记录节点与节点之间的父子关系，接下来，还应该为树实现如下基本操作
			a.初始化:通常是一个构造器，用于创建一棵空树，或者以指定节点为根来创建树
			b.为指定节点添加子节点
			c.判断树是否为空
			d.返回根节点
			e.返回指定节点(非根节点)的父节点
			f.返回指定节点(非叶子节点)的所有子节点
			g.返回指定节点(非叶子节点)的第i个子节点
			h.返回该树的深度
			i.返回指定节点的位置
		(2)为了实现树这种数据结构，程序必须能记录节点与节点之间的父子关系，为此有以下两种选择
			a.父节点表示法:每个子节点都记录它的父节点
			b.子节点链表示法:每个非叶子节点通过一个链表来记录它的所有子节点
		(3)掌握了上面的理论之后，即可以使用Java程序来实现树这种数据结构
	5)父节点表示法 
		(1)通过前面介绍可以发现，树中除根节点之外的每个节点都有一个父节点，为了记录树中节点与系节点之间的父子关系，
			可以为每个节点增加一个parent域，用以记录该节点的节点
		(2)由此可见，只要用它一个节点数组来保存树里的每个节点，并让每个节点记录其父节点在数组中的索引即可，下面程序采用父节点表示法实现了一棵树
		(3)参见TreeParent<E>
		(4)根据上面的程序粗体字代码(int parent)可以看出，定义树节点时增加了一个parent域,该parent域用于保存该节点的父节点在数组中的索引，
			通过这种方式即可记录树中节点之间的父子关系
	6)子节点链表示法
		(1)父节点表示法的思想是让每个节点"记住"它的父节点的索引，父节点表示法是从子节点着手的；反过来。
			还有另一种方式，让父节点"记住"它的所有子节点，在这种方式下，由于每个父节点需要记住多个子节点，因此必须采用"子节点链"表示法
		(2)采用子节点链表示法来记录树时，需要为每个节点维护一个子节点链，通过该子节点链来记录该节点的所有子节点
		(3)参见TreeChild<E>
		(4)从上面的程序中的粗体代码(SonNode first)可以看出，定义树节点时增加了一个first域，该first域用于保存对该节点的子节点链的引用，	
			通过这种方式即可记录树中节点之间的父子关系
		(5)使用这种子节点链表示法来存储树时，添加节点时需要找到指定父节点的子节点链的最后节点，并让它指向新增的节点即可
2.二叉树
	1)对于普通树来说，由于它需要遵循的规律太少，程序控制起来反而更加复杂，因此限制了它在实际应用中的使用，如果对普通树增加一些限制，让一棵树每个节点最多只能包含两个子节点
		而且严格区别左子节点、右子节点(左、右子节点的位置不能交换)，这棵树就变成了二叉树
	2)二叉树的定义和基本概念
		(1)二叉树指的是每个节点最多只能有两个子树的有序树，通常左边的子树被称作"左子树"，右边的子树被称作"右子树"，由此可见，二叉树依然是树，它是一种特殊的树
		(2)二叉树	