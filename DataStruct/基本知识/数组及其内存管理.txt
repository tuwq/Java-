第一章	数组及其内存管理
总结:
	1)主要介绍Java数组在内存分配方面的知识
	2)介绍Java数组的静态特征，即Java数组一旦初始化完成，该数组长度将不可改变
	3)对于数组变量而言，一定要区分它何时只是数组变量，何时代表数组对象本身
	4)Java数组静态初始化和动态初始化，多维数组的实质
1.数组初始化
	1)Java数组是静态的
	2)当数组被初始化之后，该数组所占的内存空间、数组长度都是不可变的
	3)数组初始化的有以下两种方式
		(1)静态初始化
			初始化时由程序员显式指定每个数组元素的初始值，由系统决定数组长度
		(2)动态初始化
			初始化时程序员只指定数组长度，由系统为数组元素分配初始化
	4)无论采用那种方式初始化Java数组，一旦初始化完成，该数组的长度就不可改变
	5)Java数组是静态的，一旦数组初始化完成，数组元素的内存空间分配立即结束
		，程序只能改变数组的元素的值，无法改变数组的长度
	6)与Java不同，在JavaScript这种动态语言中数组长度是可以动态改变的
2.数组一定要初始化
	1)使用Java数组之前必须先初始化数组(在使用数组前，必须先创建数组)
	2)始终记住，Java的数组变量只是引用类型的变量，它并不是数组对象本身,
		只要让数组变量指向有效的数组对象，程序中即可使用该数组变量
	3)Java程序中的引用变量并不需要经过所谓的初始化操作，需要进行初始化的是引用变量
		所引用的对象。
	4)对于数组变量来说，它并不需要进行所谓的初始化，只要让数组变量指向一个
		有效的数组对象，程序即可正常使用该数组变量
3.基本类型数组的初始化
	1)所有局部变量都是放在栈内存里保存的，
		不管其是基本类型的变量还是引用类型的变量都是存储在各自的方法栈内存中
	2)但引用类型的变量所引用的对象(包括数组、普通Java对象)则总是存储在堆内存中
	3)对应Java而言，堆内存中的对象(不管是数组对象，还是普通的Java对象)通常不允许直接访问,
		为了访问堆内存中的对象，通常只能通过引用变量
	4)引用变量本质上只是一个指针，只要程序通过引用变量访问属性，调用方法,
		该引用变量就会由它所引用的对象代替
4.引用类型数组的初始化
	1)引用类型数组的数组元素依然是引用类型，因此数组元素里存储的还是引用，它指向另一块内存,
		这块内存里存储了该引用变量所引用的对象(包括数组和Java对象)	
	2)Java语言不允许直接访问堆内存中的数据可以保证程序更加健壮,
		如果程序直接访问并修改堆内存中数据，可能会破坏内存中的数据完整性，从而破坏程序
5.没有多维数组
	1)所谓多维数组，其实就是数组元素依然是数组的一维数组
		二维数组是数组元素是一维数组的数组
		三维数组是数组元素是二维数组的数组
		N维数组是数组元素是N-1数组的数组
	2)Java允许将多维数组当成一维数组处理。
		初始化多维数组时可以先只初始化最左边的维数
		此时该数组的每个元素都相当于一个数组引用的变量
		这些数组元素还需要进一步的初始化
		参见TwoDimensionTest
	3)当定义一个object[]类型的数组，此时每个数组元素都相当于一个Object类型的引用变量
		因此可以指向任何对象(包括数组对象和普通Java对象)
		参见ObjectArrayTest
	4)多维数组的本质依然是一维数组，在Java程序中使用数组时，
		应该多从内存控制角度来把握程序，而不要仅仅停留在代码表面上
