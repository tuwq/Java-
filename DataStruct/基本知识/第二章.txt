第二章	对象及其内存管理
1.实例变量和类变量
	1)形参：
		(1)在方法签名中定义的局部变量，由方法调用者为其赋值，
			随方法结束而消亡
	2)方法内的局部变量:
		(2)在方法内定义的局部变量，必须在方法内对其进行显示初始化
			这种类型的局部变量从初始化完成后开始生效
			随方法结束而消亡
	3)代码块内的局部变量，
		(3)在代码块内定义的局部变量，必须在代码块内对其进行显示初始化
			这种类型的局部变量从初始化完成后开始生效
			随代码块的结束而消亡
	4)局部变量的作用时间很短暂，它们都被存储在栈内存中
	5)static
		(1)成员变量没有使用时
			非静态变量或实例变量
		(2)成员变量使用时
			静态变量或类变量
2.实例变量和类变量的属性
	1)使用static修饰的成员变量是类变量，属于该类本身
	2)没有使用static修饰的成员变量是实例变量，属于该类的实例
	3)在同一个jvm内，每个类只对应一个Class对象，但每个类可以创建多个对象
	4)由于同一个jvm内每个类只对应一个Class对象，因此同一个jvm内的一个类的类变量(static)
		只需一块内存空间，但对于实例变量而言，该类每创建一次实例
		就需要为实例变量分配一块内存空间。
		也就是有几个实例，实例变量就需要几块内存空间
3.实例变量的初始化时机
	1)对于实例变量而言，它属于Java对象本身。
		从程序运行的角度来看，每次创建Java对象都需要为实例变量分配内存空间
		并对实例变量执行初始化
	2)从语法角度来看，程序可以在三个地方对实例变量执行初始化
		(1)定义实例变量时指定初始值
		(2)非静态代码块中对实例变量指定初始值
		(3)构造器中对实例变量指定初始值
		其中第1、2两种方式比第3种更早执行
		1、2执行顺序取决于排列顺序
		参见InitTest	非静态代码块和初始化赋值按顺序执行
4.类变量的初始化时机
	1)类变量属于Java类本身，从程序运行的角度来看，每个jvm对一个Java类
		只初始化一次，因此只有每次运行Java程序时，才会初始化该Java类
		才会为该类的类变量分配内存空间，并执行初始化
	2)从语法角度来看，程序可以在两个地方对类变量执行初始化
		(1)定义类变量时指定初始值
		(2)静态初始化块中对类变量指定初始值
		1、2执行顺序取决于排列顺序
		参见StaticInitTest和PriceTest
5.父类构造器
	1)当创建任何Java对象时，程序总会先依次调用每个父类的非静态初始化代码块、构造器(总是从Object开始)
		执行初始化，然后才调用本类的非静态代码块，构造器执行初始化
	2)当所有的父类非静态初始化块、构造器依次调用完成后
		系统调用本类的非静态初始化块、构造器执行初始化，最后返回本类的实例
		参见InitTestEx
	3)super调用用于显式调用父类构造器，this调用用于显式调用本类中另一个重载的构造器
		super调用和this调用都只能在构造器中使用，而且super调用和this调用都必须作为
		构造器的第一行代码，因此构造器中的super调用和this调用最多只能使用其中之一
		而且最多只能调用一次
		